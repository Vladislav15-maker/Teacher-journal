// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  firstName     String
  lastName      String
  classes       Class[]
  sentMessages  Message[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Class {
  id        String    @id @default(cuid())
  name      String
  teacherId String
  teacher   User      @relation(fields: [teacherId], references: [id])
  students  Student[]
  subjects  Subject[]
  messages  Message[]
  lessons   Lesson[]
}

model Student {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  classroomId String
  classroom   Class    @relation(fields: [classroomId], references: [id])
  records     Json[]
}

model Subject {
  id         String   @id @default(cuid())
  name       String
  classId    String
  classroom  Class    @relation(fields: [classId], references: [id])
  lessonDays Int[]
  lessons    Lesson[]
}

model Lesson {
  id          String    @id @default(cuid())
  date        String
  topic       String
  homework    String
  subjectId   String
  subject     Subject   @relation(fields: [subjectId], references: [id])
  classId     String
  classroom   Class     @relation(fields: [classId], references: [id])
  lessonType  String?
  maxScore    Int?
  records     Json[]
}

model Message {
  id          String   @id @default(cuid())
  text        String
  timestamp   DateTime @default(now())
  classroomId String
  classroom   Class    @relation(fields: [classroomId], references: [id])
  studentId   String?
  sender      User     @relation(fields: [senderId], references: [id])
  senderId    String
}
